name: Build and Test ARLinguaSphere

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: 2022.3.25f1
        
    - name: Cache Unity Library
      uses: actions/cache@v3
      with:
        path: Library
        key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-
          
    - name: Cache Unity Packages
      uses: actions/cache@v3
      with:
        path: Packages
        key: Packages-${{ hashFiles('Packages/packages-lock.json') }}
        restore-keys: |
          Packages-
          
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Build Android APK
      uses: game-ci/unity-builder@v2
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        ANDROID_KEYSTORE_NAME: ${{ secrets.ANDROID_KEYSTORE_NAME }}
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_ALIAS_PASS: ${{ secrets.ANDROID_KEY_ALIAS_PASS }}
      with:
        targetPlatform: Android
        buildMethod: BuildScripts.BuildScript.BuildAndroid
        
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: ARLinguaSphere-Android
        path: build/Android/ARLinguaSphere.apk
        
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Unity
      uses: game-ci/unity-setup@v2
      with:
        unity-version: 2022.3.25f1
        
    - name: Run Tests
      uses: game-ci/unity-test-runner@v2
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        testMode: all
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Test Results
        path: artifacts/
        
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        
    - name: Install dotnet-format
      run: dotnet tool install -g dotnet-format
      
    - name: Run dotnet-format
      run: dotnet-format --check --verbosity diagnostic Assets/Scripts/
      
    - name: Check for formatting issues
      run: |
        if [ $? -ne 0 ]; then
          echo "Code formatting issues found. Run 'dotnet-format' to fix them."
          exit 1
        fi
