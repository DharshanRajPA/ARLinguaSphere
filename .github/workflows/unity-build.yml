name: Unity CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Unity Project
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      
      - name: Run Unity Tests
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          unityVersion: 2022.3.21f1
          testMode: all
          coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport'
          
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test results
          path: artifacts
          
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Coverage results
          path: CodeCoverage

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - Android
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-
            Library-
      
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: 2022.3.21f1
          buildName: ARLinguaSphere
          buildMethod: BuildScripts.BuildScript.BuildAndroid
          versioning: Semantic
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ARLinguaSphere-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
          
      - name: Create Release (Main Branch)
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: ARLinguaSphere v${{ github.run_number }}
          body: |
            ## Changes in this Release
            - Automated build from main branch
            - Commit: ${{ github.sha }}
            
            ## Download
            - Android APK available in artifacts
            
            ## Testing
            - All unit tests passed
            - Integration tests completed
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      
      - name: Install Code Analysis Tools
        run: |
          dotnet tool install -g dotnet-format
          dotnet tool install -g security-scan
      
      - name: Run Code Formatting Check
        run: |
          find Assets/Scripts -name "*.cs" -exec dotnet format --verify-no-changes {} \; || echo "Code formatting issues found"
      
      - name: Run Security Scan
        run: |
          security-scan Assets/Scripts/ || echo "Security issues found"
      
      - name: Upload Code Quality Report
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-report
          path: reports/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-android, code-quality]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ARLinguaSphere-Android
          path: ./build
      
      - name: Deploy to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: testers
          file: ./build/ARLinguaSphere.apk
          releaseNotes: |
            Automated staging build from develop branch
            Commit: ${{ github.sha }}
            Build: ${{ github.run_number }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-android, code-quality]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ARLinguaSphere-Android
          path: ./build
      
      - name: Deploy to Google Play Store
        uses: r0adkll/upload-google-play@v1.1.1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: com.arlinguasphere.app
          releaseFiles: ./build/ARLinguaSphere.aab
          track: internal
          status: completed
          inAppUpdatePriority: 2
          userFraction: 0.5
          whatsNewDirectory: distribution/whatsnew
          mappingFile: ./build/mapping.txt

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-android
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ARLinguaSphere-Android
          path: ./build
      
      - name: Run Performance Tests
        run: |
          # Placeholder for performance testing
          echo "Running performance tests..."
          echo "APK size: $(du -h ./build/ARLinguaSphere.apk)"
          echo "Memory analysis: TBD"
          echo "Battery usage analysis: TBD"
      
      - name: Upload Performance Report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: ./performance-report.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-android
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ARLinguaSphere-Android
          path: ./build
      
      - name: Run Security Scan on APK
        run: |
          # Install APK analysis tools
          echo "Installing security scanning tools..."
          # Placeholder for APK security scanning
          echo "Scanning APK for security vulnerabilities..."
          echo "Checking for hardcoded secrets..."
          echo "Analyzing permissions..."
      
      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: ./security-report.json
